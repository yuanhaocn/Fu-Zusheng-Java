1.TreeSet
场景：各种排序，包含之前的数组排序
简介：
	基于红黑树的treemap的key构建的一个集合，本质是个set
	它强制要求进行排序，如果不拍就会异常！事实上，我们
	的八大基本数据类型包装类和String都已经实现了所谓的
	排序法则。
	
	
2.关于TreeSet存放包装类类型的数据
	TreeSet<Double> set = new TreeSet<Double>();
	set.add(99.0);
	set.add(-1.0);
	set.add(56.12);
	set.add(32.47);
	set.add(77.66);
	System.out.println(set);
	
	基本数据类型的包装类可以做排序
	
	
3.关于TreeSet存放String类型
	TreeSet<String> set = new TreeSet<String>();
	set.add("a");
	set.add("ab");
	set.add("hello");
	set.add("hallo");
	set.add("welloo");
	System.out.println(set);
	
	针对String类型是字典顺序
	
	
4.关于TreeSet存放Book类型
	出现异常：	
		Exception in thread "main" java.lang.ClassCastException: com.treeset.www.Book cannot be cast to java.lang.Comparable
			at java.util.TreeMap.compare(Unknown Source)
			at java.util.TreeMap.put(Unknown Source)
			at java.util.TreeSet.add(Unknown Source)
			at com.treeset.www.Demo03.main(Demo03.java:12)
			
	根据异常我们发现需要我们的Book类实现Comparable接口
	
	
5.Comparable
	接口，只含一个方法，是compareTo方法
	
	int compareTo(T o) 比较此对象与指定对象的顺序
	参数：
		指定对象
	返回值：
		是int类型，我们要求取值是-1   0   1
		
		
	重写compareTo方法需要根据用户的需求进行定制
	
	
6.在Book类上实现Comparable接口—————根据图书编号进行排序
	//实现接口，泛型是Book类型，实际上是同一个类对象的比较
	public class Book implements Comparable<Book>{
		//重写compareTo方法
		@Override
		public int compareTo(Book book) {
			//根据标号进行排序
			if (number>book.number) {
				return 1;
			}else if(number<book.number) {
				return -1;
			}
			return 0;
		}
	}
	
7.Comparator
	用途和Comparable接口一样
	int compare(T o1, T o2)     比较用来排序的两个参数 
	参数：	
		两个待比较的对象
		
	返回值：	
		-1    0    1
		
		
8.需要单独创建一个第三方类实现Comparator接口————根据图书价格进行排序
	//构建第三方比较器
	public class XiaoSan implements Comparator<Book>{
		//对book1和book2比较排序
		@Override
		public int compare(Book book1, Book book2) {
			if (book1.getPrice()>book2.getPrice()) {
				return 1;
			} else if(book1.getPrice()<book2.getPrice()) {
				return -1;
			}
			return 0;
		}
	}
	
9.测试代码
	//构造方法上把比较器对象绑定在集合上
	TreeSet<Book> set = new TreeSet<Book>(new XiaoSan());
	
	


	
14.线程和进程的区别(面试必问)
	
	
15.
	
	
	

		
	
