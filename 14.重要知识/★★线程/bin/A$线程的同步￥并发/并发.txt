1.临界资源问题解决方案
本质:同一时刻有且只有一个线程可以进行增删改的操作。
语法：
	synchronized (object) {
		//代码块		
	}
	
	object是一个对象，可以是Object的对象或者是其子类的对象
	但是不允许写Thread的对象
	
原则：
	1）尽可能包含出现临界资源访问问题的代码，
		尽量不要包含无关代码，代码越多效率越低
		
	2）可以用来修饰方法，但是一般不建议这么干
	
	
2.解决临界资源问题代码
	//synchronized后面的对象要和其他的synchronized后面的对象一致
	synchronized (obj) {		
		while(ticket>0) {
			ticket-=1;
			System.out.println("快手取了1张票，还剩"+ticket+"张票~");
		}
	}
	
	
	synchronized (obj) {				
		while(ticket>0) {
			ticket-=1;
			System.out.println("抖音取了1张票，还剩"+ticket+"张票！");
		}
	}
	
	
3.加大一下交替出现的概率
	while (ticket > 1) {
		// synchronized后面的对象要和其他的synchronized后面的对象一致
		synchronized (obj) {
			ticket -= 1;
			System.out.println("快手取了1张票，还剩" + ticket + "张票~");
		}
	}
	
	while (ticket > 0) {
		synchronized (obj) {
			ticket -= 1;
			System.out.println("抖音取了1张票，还剩" + ticket + "张票！");
		}
	}
	
	
4.synchronized原理
	在进入synchronized代码块的第一行，当前线程获得obj这个对象的使用权
	，我们把obj称为对象锁。在synchronized代码块结束之前，对象锁一直有效。
	效果是使得其他的所有的线程对象均无法对对象锁里面的代码中的变量进行修改
	
	锁机制：
		在synchronized里面，其他线程对象无法获得该锁，一旦synchronized代码
		快执行完毕，其他线程和当前线程公平竞争该锁对象，谁得到谁执行
		其他线程均陷入阻塞状态。
		
		
		
5.synchronized修饰方法(了解)
	Thread代码：
		public class MyThread {
			public Integer money;

			class ThreadA extends Thread {
				@Override
				public void run() {
					show();
					System.out.println(this);
				}
			}

			// 定义一个被synchronized修饰方法
			public synchronized void show() {
				for (int i = 0; i < 100; i++) {	
					money--;
					System.out.println(money);
				}
			}

		}
		
		
	测试代码：
		public static void main(String[] args) {
			Thread[] ts = new Thread[5];
			Integer number = new Integer(1000);
			MyThread myThread = new MyThread();
			myThread.money = number;
			for (int i = 0; i < ts.length; i++) {
				ts[i] = myThread.new ThreadA();
				ts[i].start();
			}
		}
		
		
6.能不能更灵活的处理synchronized呢？？？能不能不再synchronized代码
块结束的时候释放锁，而改为提前释放呢？？？
	非提前结束的代码：
		ThreadA代码：
			public void run() {
				setName("拌饭");
				for (int i = 0; i < 1000; i++) {
					synchronized (obj) {				
						System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
						System.out.println(getId() + "    " + getName());
					}
				}
			}
			
		ThreadB代码：
			public void run() {
				setName("米线");
				for (int i = 0; i < 1000; i++) {
					synchronized (obj) {				
						System.out.println("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
						System.out.println(getId() + "    " + getName());
					}
				}
			}
			
		测试代码：
			ThreadNormal tn = new ThreadNormal();
			ThreadA threadA = tn.new ThreadA();
			ThreadB threadB = tn.new ThreadB();
			threadA.start();
			threadB.start();
			
			
	提前结束代码：
		ThreadA代码：
			public void run() {
				setName("拌饭");
				for (int i = 0; i < 100; i++) {
					synchronized (obj) {				
						System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
						try {
							//wait是使得所在的线程陷入等待状态，并且手动释放对象锁
							obj.wait();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						System.out.println(getId() + "    " + getName());
					}
				}
			}
			

			
		
		
	

		

