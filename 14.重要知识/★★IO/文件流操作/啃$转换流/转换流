	
13.InputStreamReader
	简介：
		字节流转为字符流，是Reader抽象类的子类		
		
	场景：
		用户输入使用的是字节流，但是java在解析汉字的时候
		可能会导致乱码，因此需要进行转化
		

14.InputStreamReader的构造方法
	InputStreamReader(InputStream in) 创建一个使用默认字符集的 InputStreamReader对象
	参数是字节流，根据参数构建字符流对象
	
	
15.使用InputStreamReader设计自己的Scanner类
	System.out.println("请输入一些数据。。。");
	//根据字节流构建转换流对象，由于需求是输入，这里使用System.in
	InputStreamReader isr = new InputStreamReader(System.in);
	//构建char类型的数组
	char[] chars = new char[1024];
	try {
		//读取用户输入,返回值是本次读取的字符个数
		 int number = isr.read(chars, 0, chars.length);
		//打印用户输入的字符串,使用number截取有效长度
		 System.out.println(new String(chars,0,number));
	} catch (IOException e) {e.printStackTrace();}
		
16.能不能解决原来Scanner无法输入单个字符的问题
	System.out.println("请输入一个字符。。。");
	InputStreamReader isr = new InputStreamReader(System.in);
	try {
		/*
		 * read方法只接受一个字符 返回值是int类型
		 * 代表输入的字符的ascii码
		 * 因此下面可以使用强制类型转换
		 */
		int number = isr.read();
		System.out.println((char) (number));
	} catch (IOException e) {e.printStackTrace();}
	
17.使用转换流读取文档保证不乱码
	// 构建file对象
	File file = new File("C:\\Users\\Administrator\\Desktop\\岳阳楼记.txt");
	try (// 构建文件输入流对象
			FileInputStream fis = new FileInputStream(file);
			// 使用文件输入流对象构建转换流
			InputStreamReader isr = new InputStreamReader(fis);) {
		//构建转换流需要的字符数组
		char[] chars = new char[1];
		//定义变量接受有效读取字符个数
		int number  = 0;
		//构建循环,条件和之前一样
		while((number=isr.read(chars))!=-1) {
			//使用数组构建字符串
			System.out.print(new String(chars,0,number));
		}
	} catch (Exception e) {}