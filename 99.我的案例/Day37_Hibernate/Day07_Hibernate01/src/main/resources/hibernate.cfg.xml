<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
	
<!-- hibernate-configuration,根节点,用于配置hibernate -->
<hibernate-configuration>
	<!-- 配置一个session-factory,session工厂 -->
	<!-- session是数据库的会话的对象,通过session实现数据库的增删改查. -->
	<session-factory>
		<!-- property,属性,键值对的形式,用来配置不同的设置选项 -->
		<!-- 必选项 -->
		<!-- 设置数据库用户名 -->
		<property name="hibernate.connection.username">root</property>
		<!-- 密码 -->
		<property name="hibernate.connection.password">syc</property>
		<!-- 驱动包 -->
		<property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
		<!-- url -->
		<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/sql01</property>
		
		<!-- 可选项 -->
		<!-- 用来显示当前操作的sql语句 -->
		<property name="hibernate.show_sql">true</property>
		<!-- 格式化sql语句 -->
		<property name="hibernate.format_sql">true</property>
		
		<!-- 设置数据库中表的生成策略 -->
		<!-- update,create,create-drop,validate -->
		<!-- update:一般开发过程中,常用update,如果数据库中没有对应的表,会创建新表;
			如果有表,(当JavaBean与表不一致的时候,)则更新表结构 -->
		<!-- create:无论数据库中原先是否存在表,每次已加载该配置文件,都会创建一个新表. -->
		<!-- create-drop:无论数据库中原先是否存在表 ,都会先删除旧表,然后再创建新表.-->
		<!-- validate:只是单纯的验证表的结构,并不会对表做出任何的更新 -->
		<property name="hibernate.hbm2ddl.auto">update</property>
		
		<!-- 设置数据库的方言 -->
		<!-- 为了告诉Hibernate底层用来生成什么样的sql语句. -->
		<property name="hibernate.dialect">
			org.hibernate.dialect.MySQLDialect
		</property>
		
		<!-- 加载映射文件 -->
		<!-- 该文件表示Java对象与数据库表之间的映射关系,ORM -->
		<mapping resource="com/syc/hibernate/domain/Employee.hbm.xml"/>
	</session-factory>
</hibernate-configuration>