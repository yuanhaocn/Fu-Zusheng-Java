package B自定义注解;
/**
 * 自定义注解
 * 使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口
 * 要点：
 * 		@interface用来声明一个注解
 * 			格式为：public @interface 注解名{定义体}
 *		其中每个方法实际上是声明了一个配置参数
 *			方法的名字就是参数的名字
 *			返回值类型就是参数的类型（返回值类型只能是基本数据类型，class,String,enum）
 *			可以通过default来声明参数的默认值
 *			如果只有一个参数成员，一般参数名为value
 *
 *
 *
 *
 *元注解：
 *元注解的作用就是负责注解其他的注解，java中定义了4个标准的meta-annotation类型，它们被用来提供对其他
 *annotation类型作说明
 *这些类型和它们所支持的类在java.lang.annotation包中可以找到
 	*@Target
 	*@Retention
 	*@Documented
 	*@Inherited
  
  
 *@Target
 *作用：
 *		用于描述注解的使用范围（即：被描述的注解可以用在什么地方）
 *__________________________________________________________________
 *所修饰范围							取值ElementType
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *package 包							PACKAGE
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *类，接口，枚举，Annotation类型			TYPE
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *类型成员（方法，构造器，成员变量，枚举值）		CONSTRUCTOR：用于描述构造器
 *									FIELD：用于描述域
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *									METHOD：用于描述方法
 *方法参数和本地变量						LOCAL_VARIABLE:用于描述局部变量
 *									PARAMETER:用于描述参数
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *@Target(value=***)
  
  
 *@Retention
 *作用：
 *		表示需要在什么级别保存该注解信息，用于描述注解的生命周期
 *__________________________________________________________________
 *取值RetentionPolicy				作用
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *SOURCE						在源文件中有效（即源文件保留）
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *CLASS			 				在class中有效（即class保留）
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *RUNTIME						在运行时有效（即运行时保留）
 *								为Runtime可以被反射机制读取
 *――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 *
 *注意：
 *		注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值
 *		也经常使用负数（比如-1）表示不存在的含义
 */

public class Info {}
