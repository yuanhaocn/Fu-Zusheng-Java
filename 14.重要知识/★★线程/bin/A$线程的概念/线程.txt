1.多线程
场景：
	买票   进站   地铁   ――――――  很多事情同时进行
对于java开发：
	服务器为很多人同时提供服务，春运和双十一
	实际上是大并发架构的雏形
本质：
	类
	
	
2.Thread
	是一个标准线程类，提供了线程对象的属性和一些方法比如线程名字
	标号、优先级之类的。。。
	jvm允许程序同时执行多种功能，高优先级的线程执行可能性大。
	
	
3.继承Thread类，重写run方法――――――设计我们自己的线程类
	线程类的设计：
	
		//继承标准线程类
		public class MyThread01 extends Thread {

			// 重写run方法
			@Override
			public void run() {
				System.out.println("hello world");
			}
			
		}
		
	测试代码：
		@Test
		public void test01() {
			//构建线程类的对象
			MyThread01 t1 = new MyThread01();
			/*
			 * 执行run方法,此时不允许直接进行run的调用
			 * 要使用start方法去启动线程
			 */
			t1.start();
		}
		
		
4.start方法
	void start()    使该线程开始执行，jvm调用该线程的 run 方法。
	start的确调用了run方法，debug无法查看的原因是没有java代码
	而是c代码
	
	注意：
		1）strat方法是线程启动唯一的方式
		2）start方法对一个线程对象，只能启动一次，如下代码是错的：
			t1.start();
			t1.start();
			
			
5.多线程原理之CPU调度问题和时间片切换方案
	场景：一台电脑运行  	QQ音乐    LOL    和QQ
	见图片
	
	
6.线程对象的名字的设置和获取
	String getName() 返回该线程的名称
	
	void setName(String name) 设置线程名称
	
	代码：
		MyThread01 t1 = new MyThread01();
		//获取线程名，默认值是Thread-X
		String name = t1.getName();
		System.out.println(name);
		//设置线程名
		t1.setName("chq");
		System.out.println(t1.getName());
		
7.线程对象的标号的获取
	long getId()  返回该线程的标号
	代码：
		MyThread01 t1 = new MyThread01();
		//获取线程的id
		long id = t1.getId();
		System.out.println(id);
		
	注意：
		线程的id是由jvm分配，为了避免冲突，每个线程都不一样
		
		
8.线程对象的优先级的设置和获取
	void setPriority(int newPriority) 更改线程的优先级

	int getPriority() 返回线程的优先级

	代码：
		MyThread01 t1 = new MyThread01();
		//获取线程的优先级，默认是5
		int priority = t1.getPriority();
		System.out.println(priority);
		//设置线程的优先级，数值越大，优先执行的可能性越高
		t1.setPriority(100);
		System.out.println(t1.getPriority());
		
		
	注意：
		1）数值越大，优先执行的可能性越高，默认为5
		2）范围为[1,10]，实际上设置100也行，不过只是没有效果
		3）其实在真实执行过程中，优先级根本没用
		
		
9.线程控制效果之线程休眠
	static void sleep(long millis) 在指定的毫秒数内让当前正在执行的线程暂停执行
	代码：
		if(i==50) {
			try {
				//线程睡眠方法，参数是休眠的时间，单位是毫秒
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	结果：	
		该代码放在什么位置就在什么位置昏睡，开发中经常给
		软件故意制作bug拖拽运行速度，赚取后期维护费用
		
		
10.线程控制效果之线程礼让
	static void yield()     暂停当前正在执行的线程对象，并执行其他线程
	代码：
		public void run() {
			for (int i = 0; i < 100; i++) {
				if(i==30) {
					//暂停当前线程的执行，把cpu让给其他线程
					Thread.yield();
				}
				System.out.println(getName()+"在打印i,此时i是"+i);
			}
		}
		
	结论：
		yield不一定会执行，有很多情况：
			1）如果所有的线程已经结束了，就剩下带有yeild方法
				的线程无法谦让
			2）谦让是让出时间片，不保证该线程接着又抢回来
			
		因为该方法并不是强制性的，所以并不会抛出异常
		
		
11.线程控制效果之线程排序(合并)
	void join()  等待该线程终止,谁调用就等待谁结束 ，地老天荒
	
	void join(long millis)  等待该线程终止的时间最长为 millis 毫秒，识时务者为俊杰

	代码：
		private Thread t2;
		
		@Override
		public void run() {
			for (int i = 0; i < 100; i++) {
				if(i==66) {
					System.out.println("------------------------");
					try {
						//等待t2执行完毕之后，再来执行t1
						t2.join();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				System.out.println(getName()+"在打印i,此时i是"+i);
			}
		}
		
		
	结果：	
		此时的线程谦让一定成功，具有强制性
		使用哪个线程对象调用就把哪个线程合并到当前线程之前执行
		

	
