package 开发模式;
/**
 * 不是设计模式，设计模式说的是类与类的关系，这个模式是解决死锁的方案
 * 
 * 生产者消费者问题（Producer-consumer problem）,也称有限缓冲问题（Bounded-buffer problem），是一个多线程
 * 同步问题的经典案例，该问题描述了两个共享固定大小缓冲区的线程-即所谓的“生产者”和“消费者”，--在实际运行时会发生的问题。
 * 生产者的主要作用是生成一定量的数据放在缓冲区中，然后反复此过程，与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是
 * 要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据
 * 要解决问题，就必须让生产者在缓冲区满时休眠（要么干脆就放弃数据），等到下次消费者消耗缓冲区中的数据的时候，生产者才能被唤醒
 * 开始往缓冲区添加数据。同样的，也可以让消费者在缓冲区空时进入休眠，等到生产者往缓冲区添加数据之后，再唤醒消费者，通常
 * 常用的方法有信号灯法，管程等。如果解决方法不够完善，则容易出现死锁的情况，出现死锁时，两个线程都会陷入休眠，等待对方唤醒自己
 *
 */
public class Info {}
