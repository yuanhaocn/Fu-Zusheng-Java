<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 Copyright (c) 2017 Yanzheng [https://github.com/micyo202/yan]

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 配置 c3p0 单个数据源（性能较差，改为 druid 数据源支持监控） -->
    <!--
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="root" />
        <property name="password" value="root" />
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://192.168.0.200:3306/demo?useUnicode=true&characterEncoding=utf8&useSSL=false" />

        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="20" />
        <property name="initialPoolSize" value="10" />
    </bean>
     -->

    <!-- 配置 druid 多个数据源（默认数据源） -->
    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password、driverClass -->
        <property name="username" value="${default.db.username}"/>
        <property name="password" value="${default.db.password}"/>
        <property name="driverClassName" value="${default.db.driverClassName}"/>
        <property name="url" value="${default.db.url}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <property name="minIdle" value="${db.minIdle}"/>
        <property name="maxActive" value="${db.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${db.validationQuery}"/>
        <property name="testWhileIdle" value="${db.testWhileIdle}"/>
        <property name="testOnBorrow" value="${db.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${db.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 监控功能 -->
        <property name="filters" value="${db.filters}"/>
    </bean>

    <!-- 配置 druid 多个数据源（扩展数据源） -->
    <bean id="extendDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="username" value="${extend.db.username}"/>
        <property name="password" value="${extend.db.password}"/>
        <property name="driverClassName" value="${extend.db.driverClassName}"/>
        <property name="url" value="${extend.db.url}"/>

        <property name="initialSize" value="${db.initialSize}"/>
        <property name="minIdle" value="${db.minIdle}"/>
        <property name="maxActive" value="${db.maxActive}"/>

        <property name="maxWait" value="${db.maxWait}"/>

        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>

        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${db.validationQuery}"/>
        <property name="testWhileIdle" value="${db.testWhileIdle}"/>
        <property name="testOnBorrow" value="${db.testOnBorrow}"/>
        <property name="testOnReturn" value="${db.testOnReturn}"/>

        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${db.maxPoolPreparedStatementPerConnectionSize}"/>

        <property name="filters" value="${db.filters}"/>
    </bean>

    <!-- 动态数据源（多个数据源） -->
    <bean id="dataSource" class="com.yan.core.spring.DataSourceContextHolder">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="defaultDataSource" value-ref="defaultDataSource"/>
                <entry key="extendDataSource" value-ref="extendDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="defaultDataSource"/>
    </bean>

    <!-- 配置 sessionFactory 原版，别名不支持通配符 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/yan/**/*Mapper.xml</value>
                <value>classpath*:mybatis/**/*Mapper.xml</value>
            </list>
        </property>
        <!-- 配置 mybatis 分页插件 -->
        <property name="plugins">
            <bean class="com.github.pagehelper.PageInterceptor">
                <property name="properties">
                    <value>
                        helperDialect=mysql
                        offsetAsPageNum=true
                        rowBoundsWithCount=true
                        pageSizeZero=true
                        reasonable=false
                    </value>
                </property>
            </bean>
        </property>
    </bean>

    <!-- 配置 sessionFactory 自定义版，别名支持通配符（复杂项目不建议使用，以免别名混淆） -->
    <!--
    <bean id="sqlSessionFactory" class="com.yan.core.mybatis.SqlSessionFactoryBeanExtend">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.yan..*.model" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:com/yan/**/*Mapper.xml</value>
                <value>classpath*:mybatis/**/*Mapper.xml</value>
            </list>
        </property>
    </bean>
     -->

    <!-- 配置 MapperDao 接口所在的包名，Spring 会自动扫描其下的类（无需采用此方式进行映射） -->
    <!--
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yan..*.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
     -->

    <!-- 配置 sqlSessionTemplate 持久化模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- Yan 配置切换数据源 aop 切面 -->
    <bean id="dataSourceExchange" class="com.yan.core.aspect.DataSourceAspect"/>

    <!-- 配置事物管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事物传播行为 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事物切入点 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.yan..*.controller..*.*(..))" id="dataSourcePointCut"/>
        <aop:pointcut expression="execution(* com.yan.dao.mapper..*.*(..))" id="pointCut"/>
        <aop:advisor advice-ref="dataSourceExchange" pointcut-ref="dataSourcePointCut" order="1"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" order="2"/>
    </aop:config>

    <!-- 开始声明式事务（事物注解） -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>