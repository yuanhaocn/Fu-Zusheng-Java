7.wait方法详解
	关于使用：
		1）必须和synchronized连用否则无效
		2）必须捕获异常，无法抛出
		
	效果：
		使得所在的线程陷入WAITTING状态，并且手动释放锁，其他线程获得
		争夺该锁的机会，当前线程由于陷入阻塞状态，所以无法争夺该锁
		
	

8.notify方法的使用―――――解除因为wait方法的线程等待状态
	代码：
		synchronized (obj) {				
			System.out.println("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
			//唤醒因为当前对象锁导致的线程等待
			obj.notify();
			System.out.println(getId() + "    " + getName());
		}
	结果：
		可以唤醒一次因为obj导致的线程等待状态
		
		
9.能不能做永久唤醒？如果A一旦睡，就唤醒A！
	思路：
		可以使用一个的线程唤醒A
		
	代码：	
		// 定义一个单独的唤醒线程
		class NotifyThread extends Thread {

			@Override
			public void run() {
				// 千万不要使用死循环，条件是a线程没有执行完毕进行唤醒
				while (a.getState() != State.TERMINATED) {
					// 缺少synchronized
					synchronized (obj) {
						obj.notify();
					}
				}
			}

		}
		
10.关于notifyAll的代码：
	public static void main(String[] args) {
		Object obj = new Object();
		Thread[] ts = new Thread[10];
		for (int i = 0; i < ts.length; i++) {
			ts[i] = new Thread() {
				@Override
				public void run() {
					synchronized (obj) {
						System.out.println(getId());
						try {
							obj.wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						System.out.println(getId());
					}
				}
			};
			ts[i].start();
		}

		// 设计唤醒线程
		new Thread() {
			@Override
			public void run() {
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				synchronized (obj) {
					System.out.println("我要开始唤醒所有的线程！！！前方高能！！！");
					// 唤醒在该对象上陷入等待的所有的线程
					obj.notifyAll();
				}
			}
		}.start();
	}
	
11.关于wait和notify和notifyAll三个方法
	共同点：
		1）都需要在synchronized代码块里面执行，否则抛出异常
		
		2）都是Object的方法，所以所有的线程锁对象都可以使用
		
		3）都需要先获得这把锁才可以执行
		
	区别：
		1）wait方法是使得当前线程对象处于等待状态，并且主动释放对象锁
			并且无法再次获得该锁
			
		2）notify和notifyAll是使得在该锁上处于等待状态的线程恢复活性	
			但是不保证执行，原因是还需要获取时间片才可以，事实上唤醒
			操作使得线程对象还原到Runnable状态
			